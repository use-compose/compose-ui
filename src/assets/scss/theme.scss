/* 
 * Main file for CSS custom properties variables
 * 1 - Spacing
  * 2 - Typography
  * 3 - Colors
  * 4 - Components
  * 5 - Theme
  * 6 - Breakpoints
*/
@use './theme/variables.scss' as *;
@use '../css/theme/color/color.css';
@use '../css/theme/component/component.css';
@use 'components/index';
@use 'base/base';
@use 'utils' as utils;
@use 'sass:map';

// @property --color-primary {
//   syntax: '<color>';
//   initial-value: #e3c567;
//   inherits: true;
// }

@property --color-main-dark {
  syntax: '<color>';
  initial-value: #616970;
  inherits: true;
}

@property --color-bg {
  syntax: '<color>';
  initial-value: #f8f9fa;
  inherits: true;
}

// @import "utils/utils";
// @import "base/base";
// import all functions and mixins from utils

@property --raw {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}
@property --primary {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}

@property --color-hue {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}
@property --color-saturation {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}
@property --color-lightness {
  syntax: '<percentage>';
  initial-value: 0;
  inherits: true;
}

// @property --theme-hue {
//   syntax: '<number>';
//   initial-value: 0;
//   inherits: true;
// }
// @property --theme-saturation {
//   syntax: '<number>';
//   initial-value: 0;
//   inherits: true;
// }
// @property --theme-lightness {
//   syntax: '<percentage>';
//   initial-value: 0;
//   inherits: true;
// }

:root {
  /* https://dev.to/tracygjg/conditional-css-437e */
  --true: 1;
  --false: 0;
}

body {
  --not-raw: calc(1 - var(--raw));
}

.raw {
  --raw: var(--true);
}

// @use "utils/mixins" as *;

@include utils.cssvars(
  'theme',
  (
    border-radius: 0,
    bg-opacity: 1,
    base-unit: 4px,
    base-unit-calc: calc(4px * var(--not-raw, 1)),
    primary: calc(1 - var(--secondary) - var(--text)),
    state: 'base',
    variant: 'contained',
    color: 'hsl(var(--theme-hue), var(--theme-saturation), var(--theme-lightness))',
  )
);

// -----------------------------------------------------------------------------

// 1 - Spacing

/* 
  * TODO: V2?
  *  https://utopia.fyi/space/calculator?c=320,18,1.2,1240,20,1.25,5,2,&s=0.75|0.5,1.5|2|3|4|6,s-l&g=s,l,xl,12 
  * "Using the same base values from the fluid type calculator, this tool helps you to create a related fluid space system."
  */

/* Spacing | Global */
// :root {
//   --space-unit: clamp(1em, 1.5vw, 2em);
//   --space-unit: 1em;
//   --space-xxs: calc(0.25 * var(--space-unit));
//   --space-xs: calc(0.5 * var(--space-unit));
//   --space-sm: calc(0.75 * var(--space-unit));
//   --space-md: calc(1.25 * var(--space-unit)); // 20px
//   --space-lg: calc(2 * var(--space-unit)); // 32px
//   --space-xl: calc(3.25 * var(--space-unit)); // 52px
//   --space-xxl: calc(5.25 * var(--space-unit));
// }

@include utils.cssvars(
  'space',
  (
    unit: 1em,
    xxs: calc(0.25 * var(--space-unit)),
    xs: calc(0.5 * var(--space-unit)),
    sm: calc(0.75 * var(--space-unit)),
    md: calc(1.25 * var(--space-unit)),
    lg: calc(2 * var(--space-unit)),
    xl: calc(3.25 * var(--space-unit)),
    xxl: calc(5.25 * var(--space-unit)),
  )
);

/* responsive rule affecting all spacing variables */
@media (width >= 64rem) {
  :root {
    --space-unit: 1.25em; /* 👇 this responsive decision affects all margins and paddings */
  }
}

// -----------------------------------------------------------------------------

// 2 - Typography

/**
 * Basic typography style for copy text
 */
// body {
//   color: $text-color;
//   font: normal 125% / 1.4 $text-font-stack;
// }

// :root {
//   /* Step -2: 10.24px → 7.1111px */
//   --text-xs: clamp(0.4444rem, 0.6881rem + -0.2407vw, 0.64rem);
//   /* Step -1: 12.8px → 10.6667px */
//   --text-sm: clamp(0.6667rem, 0.8328rem + -0.1641vw, 0.8rem);
//   /* Step 0: 16px → 16px */
//   --text-md: clamp(1rem, 1rem + 0vw, 1rem);
//   /* Step 1: 20px → 24px */
//   --text-lg: clamp(1.25rem, 1.1885rem + 0.3077vw, 1.5rem);
//   /* Step 2: 25px → 36px */
//   --text-xl: clamp(1.5625rem, 1.3933rem + 0.8462vw, 2.25rem);
//   /* Step 3: 31.25px → 54px */
//   --text-xxl: clamp(1.9531rem, 1.6031rem + 1.75vw, 3.375rem);
//   /* Step 4: 39.0625px → 81px */
//   --h1: clamp(2.4414rem, 1.7962rem + 3.226vi, 5.0625rem);
//   /* Step 5: 48.8281px → 121.5px */
//   // --h1: clamp(3.0518rem, 1.9337rem + 5.5901vw, 7.5938rem);

//   /* Step 5: 67.34px → 199.60px */
//   --h1-highlight: clamp(4.2088rem, 2.174rem + 10.1738vw, 12.475rem);
//   /* --h1: clamp(1.3688rem, 2.174rem + 10.1738vw, 12.475rem); */
// }

/* https://utopia.fyi/type/calculator/?c=320,16,1.25,1620,16,1.5,5,5,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */
@include utils.cssvars(
  'text',
  (
    xs: clamp(0.4444rem, 0.6881rem + -0.2407vw, 0.64rem),
    sm: clamp(0.6667rem, 0.8328rem + -0.1641vw, 0.8rem),
    md: clamp(1rem, 1rem + 0vw, 1rem),
    lg: clamp(1.25rem, 1.1885rem + 0.3077vw, 1.5rem),
    xl: clamp(1.5625rem, 1.3933rem + 0.8462vw, 2.25rem),
    xxl: clamp(1.9531rem, 1.6031rem + 1.75vw, 3.375rem),
    h1: clamp(2.4414rem, 1.7962rem + 3.226vi, 5.0625rem),
  )
);

// -----------------------------------------------------------------------------

// 3 - Colors

// @property --component-bg {
//   syntax: "<color>";
//   inherits: true;
//   initial-value: hsla(from utils.color(primary) h s l / utils.theme(bg-opacity));
// }

@include utils.cssvars(
  'color',
  (
    // primary: #fbe134,
    primary: var(--color-primary),
    danger: var(--color-danger),
    // main-dark: #0b0c0c,
    main-dark: var(--color-main-dark),
    dark-50: color-mix(in srgb, utils.color(main-dark) 70%, white),
    bg: var(--color-bg),
    bg-50: color-mix(in srgb, utils.color(bg) 50%, white),
    primary-80: color-mix(in srgb, utils.color(primary) 80%, white),
    primary-60: color-mix(in srgb, utils.color(primary) 60%, white),
    primary-40: color-mix(in srgb, utils.color(primary) 40%, white),
    primary-20: color-mix(in srgb, utils.color(primary) 20%, white),
    primary-10: color-mix(in srgb, utils.color(primary) 10%, white),
    color-white: #fff,
    theme-color: utils.color(primary),
    initial-light: #f5f5f5
  )
);

// :root {
//   --color-primary: #fbe134;
//   --primary: hsl(from var(--color-primary) h s l / 100%);
//   --color-main-dark: #0b0c0c;
//   --main-dark: hsl(from var(--color-main-dark) h s l / 100%);
//   --color-bg: #0b0c0c;

//   /*
//    * TODO: search if we keep color-mix
//    * sources:
//    * https://una.im/color-mix-opacity/
//    * https://developer.chrome.com/docs/css-ui/css-color-mix
//    */
//   --primary-80: color-mix(in srgb, utils.color(primary) 80%, transparent);
//   --primary-60: color-mix(in srgb, utils.color(primary) 60%, transparent);
//   --primary-40: color-mix(in srgb, utils.color(primary) 40%, transparent);
//   --primary-20: color-mix(in srgb, utils.color(primary) 20%, transparent);
//   --primary-10: color-mix(in srgb, utils.color(primary) 10%, transparent);
//   --color-white: #fff;
//   --text-color: ;
//   --theme-color: var(--color-primary);
//   --initial-light: #f5f5f5;

//   --color-dark: #0b0c0c;

//   /* TODO: Dark Mode? */
//   /* Or apply it via media query */
//   @media (prefers-color-scheme: dark) {
//     // --color-primary: var(--main-dark);
//   }
// }

// -----------------------------------------------------------------------------

// 4 - Components

@include utils.cssvars(
  'component',
  (
    height: 2.625rem,
    box-shadow-x: var(--theme-base-unit-calc),
    box-shadow-y: var(--theme-base-unit-calc),
    bg-opacity: 1,
    box-shadow-color: utils.color(primary),
    box-shadow-base: utils.component(box-shadow-x) utils.component(box-shadow-y) 0 0 black,
    box-shadow-hover: utils.component(box-shadow-x) utils.component(box-shadow-y) 0 0 utils.component(box-shadow-color),
    // bg-color: color-mix(in srgb, var(--color-font-base) calc(100% + utils.color(primary, 0)), transparent),
    // color: utils.color(main-dark),
    box-shadow: utils.component(box-shadow-base),
    padding-x: utils.space(unit),
    padding-y: 0,
    margin-bottom: utils.space(unit),
    border-width: 2px,
    font-size: 1rem,
    // border-color: utils.color(main-dark),
    border: utils.component(border-width) solid utils.component(border-color),
    // Design Tokens
    primary: utils.theme(primary),
    state: utils.theme(state),
    variant: utils.theme(variant),
    not-contained: calc(1 - var(--contained, 1)),
  )
);

$colors: ('primary', 'secondary', 'danger');
$states: ('base', 'hover', 'active', 'focus', 'disabled');
$variants: ('contained', 'outlined', 'text');

/* 
 * .primary will give the following CSS:
 * .primary {
 *   color: var(--color-primary);
 * }
*/
// $color-state: primary-base;
// @each $color in $colors {
//   .#{$color} {
//     --color: var(--color-#{$color});
//   }
//   @each $state in $states {
//     @if $state == 'base' {
//       .#{$color}.#{$state} {
//         --color-state: #{$color}-#{$state};
//       }
//     } @else {
//       .#{$color}.#{$state},
//       .#{$color}:#{$state} {
//         --color-state: #{$color}-#{$state};
//       }
//     }
//     :root {
//       --color-bg-#{$state}: var(--color-bg-#{$color}-#{$state});
//       --color-text-#{$state}: var(--color-text-#{$color}-#{$state});
//       --color-border-#{$state}: var(--color-border-#{$color}-#{$state});
//     }
//   }
// }
// .contained {
//   --color-bg-token: var(--color);
//   --color-text-token: var(--color-text-night-base);
// }

// .outlined {
//   --color-bg-token: transparent;
//   --color-text-token: currentcolor;
//   --color-border-token: currentcolor;
// }
// .text {
//   --color-bg-token: transparent;
//   --color-text-token: currentcolor;
//   --color-border-token: transparent;
// }

// .primary {
//   --color-lightness: var(--color-primary-l);
//   --color-saturation: var(--color-primary-s);
//   --color-hue: var(--color-primary-h);
// }

// .secondary {
//   --color-lightness: var(--color-secondary-l);
//   --color-saturation: var(--color-secondary-s);
//   --color-hue: var(--color-secondary-h);
// }

// .danger {
//   --color-lightness: var(--color-danger-l);
//   --color-saturation: var(--color-danger-s);
//   --color-hue: var(--color-danger-h);
// }

// .primary,
// .secondary,
// .danger {
//   &:hover,
//   &.hover {
//     --theme-lightness: var(--theme-state-hover);
//   }
// }

/* 
 * Variants
*/

@mixin theming($color, $state) {
  --color-bg-token: var(--color-#{$initial}-#{$value});
}
/// même mixin que précédemment

// /// boucle unique sans bloc “base” à part
// @each $color-key, $color in $colors {
//   @each $state-key, $state in $states {
//     // on compose dynamiquement le sélecteur :
//     // - si state == base, on reste sur la classe seule
//     // - sinon on ajoute le pseudo‑state
//     $selector: if($state == base, '.#{$color}', '.#{$state}');

//     // on injecte le style
//     #{$selector} {
//       @include utils.component-themed($color, $state);
//     }
//   }
// }

@mixin theme-component {
  padding: utils.component(padding, utils.component(padding-y) utils.component(padding-x));
  border-width: utils.component(border-width);
  border-style: solid;
  border-radius: utils.theme(border-radius);
  // background-color: hsla(from utils.component(bg-color) h s l / utils.component(bg-opacity));
  // background-color: var(--component-bg);
  box-shadow: utils.component(box-shadow);
  // color: utils.component(color);
  outline: none;

  // color: color-mix(in srgb, var(--color-font-base) calc(100% + utils.color(primary, 0)), transparent);
  // color: hsl(var(--color-h) calc(var(--color-s) * 100%) calc(var(--color-l) * 100%));
  // background-color: hsla(from utils.component(bg-color) util component(bg-opacity) / 100%);
  // border-color: color-mix(in srgb, var(--color-bg) calc(100% * var(--primary, 0)), var(--color-font-base));
  // border-color: color-mix(in srgb, var(--color-bg) calc(100% * var(--primary, 0)), var(--color-font-base));

  background-color: $component-color-bg;
  border-color: $component-color-border;
  color: $component-color-text;

  &.primary {
    --component-bg-hue: var(--color-primary-hue);
    --component-bg-saturation: var(--color-primary-saturation);
    --component-bg-lightness: var(--color-primary-lightness);

    --component-border-hue: var(--color-primary-hue);
    --component-border-saturation: var(--color-primary-saturation);
    --component-border-lightness: var(--color-primary-lightness);

    --component-text-hue: var(--color-primary-hue);
    --component-text-saturation: var(--color-primary-saturation);
    --component-text-lightness: var(--color-primary-lightness);
  }

  &.secondary {
    --component-bg-hue: var(--color-secondary-hue);
    --component-bg-saturation: var(--color-secondary-saturation);
    --component-bg-lightness: var(--color-secondary-lightness);

    --component-border-hue: var(--color-secondary-hue);
    --component-border-saturation: var(--color-secondary-saturation);
    --component-border-lightness: var(--color-secondary-lightness);

    --component-text-hue: var(--color-secondary-hue);
    --component-text-saturation: var(--color-secondary-saturation);
    --component-text-lightness: var(--color-secondary-lightness);
  }

  &.danger {
    --component-bg-hue: var(--color-danger-hue);
    --component-bg-saturation: var(--color-danger-saturation);
    --component-bg-lightness: var(--color-danger-lightness);
  }

  &:hover,
  .hover {
    --component-bg-lightness: var(--component-state-hover);
  }

  &:active,
  &.active {
    --component-bg-lightness: var(--component-state-active);
    // transform: translate(var(--theme-base-unit-calc), var(--theme-base-unit-calc));
    // box-shadow: none;
  }

  &:focus,
  &:focus-visible,
  &.focus {
    --component-bg-lightness: var(--component-state-focus);
    // box-shadow: none;
    // transform: translate(var(--theme-base-unit-calc), var(--theme-base-unit-calc));
  }

  &:disabled,
  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
    --component-bg-lightness: var(--component-state-disabled);
  }

  // &.primary:not(.disabled) {
  //   --theme-hue: var(--color-primary-hue);
  //   --theme-saturation: var(--color-primary-saturation);
  //   --theme-lightness: var(--color-primary-lightness);
  // }

  // &.secondary:not(.disabled) {
  //   --theme-hue: var(--color-secondary-hue);
  //   --theme-saturation: var(--color-secondary-saturation);
  //   --theme-lightness: var(--color-secondary-lightness);
  // }
  // &.danger:not(.disabled) {
  //   --theme-hue: var(--color-danger-hue);
  //   --theme-saturation: var(--color-danger-saturation);
  //   --theme-lightness: var(--color-danger-lightness);
  // }
  // @include utils.component(border-color, utils.color(border-primary-base));

  // @include utils.component(bg-color, utils.color(bg-primary-base));

  // background-color: var(--color-bg-token);
  // color: var(--color-text-token);
  // border-color: var(--color-border-token);

  &.small {
    // @include utils.component(padding-y, space(xs));
    @include utils.component(padding-x, space(xs));
    @include utils.component(height, 2rem); // 32px
  }

  &.large {
    // @include utils.component(padding-y, space(md));
    @include utils.component(padding-x, space(md));
    @include utils.component(height, 3rem); // 48px
  }

  &.contained {
    --component-bg-opacity: var(--component-variant-contained-bg);
    --component-border-opacity: var(--component-variant-contained-border);
    --component-text-opacity: var(--component-variant-contained-text);
  }

  &.outlined {
    --component-bg-opacity: var(--component-variant-outlined-bg);
    --component-border-opacity: var(--component-variant-outlined-border);
    --component-text-opacity: var(--component-variant-outlined-text);
  }
  // &.text {
  &.text {
    --component-bg-opacity: var(--component-variant-text-bg);
    --component-border-opacity: var(--component-variant-text-border);
    --component-text-opacity: var(--component-variant-text-text);
  }
  // &.outlined {
  //   background-color: transparent;
  //   color: utils.color(primary);
  // }

  &.raw {
    @include raw-component;
  }

  // &.interactive {
  @include interactive-component;

  // }
}

@mixin interactive-component {
  font-weight: bold;
  margin-bottom: utils.component(margin-bottom);

  // &:hover,
  // &.hover {
  //   --theme-lightness: var(--theme-state-hover);
  //   @include utils.component(bg-color, utils.color(bg-primary-active));
  //   @include utils.component(border-color, utils.color(border-primary-active));
  // }

  // &:not(.disabled) {
  //   &:active,
  //   &:focus-visible {
  //     @include utils.component(bg-color, utils.color(bg-primary-active));
  //     @include utils.component(border-color, utils.color(border-primary-active));
  //     transform: translate(var(--theme-base-unit-calc), var(--theme-base-unit-calc));
  //     box-shadow: none;

  //     &:hover {
  //       box-shadow: none;
  //     }
  //   }
  // }

  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    @include utils.component(bg-color, utils.color(bg-primary-disabled));
    @include utils.component(border-color, utils.color(border-primary-disabled));
  }

  &.danger {
    @include danger-component;
  }
}

@mixin raw-component {
  // --raw: var(--true);
  box-shadow: none;

  &:hover {
    // transform: none;
    box-shadow: none;
    @include utils.component(bg-color, utils.color(primary-60));
  }

  &:active,
  &:focus-visible {
    // transform: none;
    box-shadow: none;
  }
}

@mixin danger-component {
  @include utils.component(bg-color, utils.color(danger));
  @include utils.component(color, utils.color(main-dark));
  @include utils.component(box-shadow-color, utils.color(primary-60));
}

h1,
.text-h1 {
  font-size: utils.text(h1);
}

h2,
.text-xxl {
  font-size: utils.text(xxl);
}

h3,
.text-xl {
  font-size: utils.text(xl);
}

h4,
.text-lg {
  font-size: utils.text(lg);
}

p {
  font-size: utils.text(md);
  margin: utils.space(xs) 0;
}

.text-sm {
  font-size: utils.text(sm);
}

.text-xs {
  font-size: utils.text(xs);
}

// -----------------------------------------------------------------------------

// 6 - Breakpoints

$breakpoint-mobile: 640px;
$breakpoint-tablet: 768px;
$breakpoint-desktop: 1024px;
$breakpoint-desktop-xl: 1280px;
$breakpoint-desktop-xxl: 1820px;
$breakpoints: (
  'mobile': $breakpoint-mobile,
  'tablet': $breakpoint-tablet,
  'desktop': $breakpoint-desktop,
  'desktop-xl': $breakpoint-desktop-xl,
  'desktop-xxl': $breakpoint-desktop-xxl,
);

// Breakpoints
@mixin desktop {
  @media screen and (min-width: #{$breakpoint-desktop}px) {
    @content;
  }
}

@mixin media($size) {
  $query: map.get($breakpoints, $size);

  @media only screen and (min-width: $query) {
    @content;
  }
}

// -----------------------------------------------------------------------------

// 7 - Sizes
// Used for Modals, Dialogs, Cards, etc.

@include utils.cssvars(
  'size',
  (
    small: 320px,
    medium: 640px,
    large: 960px,
  )
);

.size-small {
  width: utils.size(small);
}

.size-medium {
  width: utils.size(medium);
}

.size-large {
  width: utils.size(large);
}

// -----------------------------------------------------------------------------

// 7 - Layout
// Used for Layout components (Grid, Flexbox, etc.)

@include utils.cssvars(
  'layout',
  (
    gap: utils.space(sm),
  )
);

// -----------------------------------------------------------------------------

// 8 - Components
// Used for specific Components (Buttons, Inputs, etc.)

@include utils.cssvars(
  'y-btn',
  (
    height: 2.625rem,
    // 42px
  )
);
