/* 
 * Main file for CSS custom properties variables
 * 1 - Spacing
  * 2 - Typography
  * 3 - Colors
  * 4 - Components
  * 5 - Theme
  * 6 - Breakpoints
*/
// @use '../css/global.css' as *;
// @use '../css/theme/src/assets/variables.css' as *;
// @use '@/assets/css/theme/src/assets/variables.css';

@use 'base/base';
@use 'theme/theme' as theme;
@use 'utils' as utils;
@use 'sass:map';
@use 'sass:math';
// @use '../css/theme/variables.css' as *;

// @property --color-primary {
//   syntax: '<color>';
//   initial-value: #e3c567;
//   inherits: true;
// }

@property --color-main-dark {
  syntax: '<color>';
  initial-value: #616970;
  inherits: true;
}

@property --color-bg {
  syntax: '<color>';
  initial-value: #f8f9fa;
  inherits: true;
}

// @import "utils/utils";
// @import "base/base";
// import all functions and mixins from utils

@property --raw {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}
// @property --primary {
//   syntax: '<number>';
//   initial-value: 0;
//   inherits: true;
// }

@property --color-hue {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}
@property --color-saturation {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}
@property --color-lightness {
  syntax: '<percentage>';
  initial-value: 0;
  inherits: true;
}

// @property --theme-hue {
//   syntax: '<number>';
//   initial-value: 0;
//   inherits: true;
// }
// @property --theme-saturation {
//   syntax: '<number>';
//   initial-value: 0;
//   inherits: true;
// }
// @property --theme-lightness {
//   syntax: '<percentage>';
//   initial-value: 0;
//   inherits: true;
// }

:root {
  /* https://dev.to/tracygjg/conditional-css-437e */
  --true: 1;
  --false: 0;
}

body {
  --not-raw: calc(1 - var(--raw));
}

.raw {
  --raw: var(--true);
}

// @use "utils/mixins" as *;

@include utils.cssvars(
  'theme',
  (
    border-radius: 0,
    bg-opacity: 1,
    base-unit: 6px,
    unit-50: calc(var(--theme-base-unit) * 0.5),
    base-unit-calc: calc(var(--theme-base-unit) * var(--not-raw, 1)),
    // primary: calc(1 - var(--secondary) - var(--text)),
    // secondary: calc(1 - var(--primary) - var(--text)),
    // danger: calc(1 - var(--primary) - var(--secondary)),
    // state: 'base',
    variant: 'contained',
    current-color: color-mix(
        in srgb,
        var(--color-primary) calc(var(--primary) * 100%),
        color-mix(
          in srgb,
          var(--color-secondary) calc(var(--secondary) * 100%),
          var(--color-danger) calc(var(--danger) * 100%)
        )
      ),
    // current-color: calc(
    //     var(--primary) * var(--color-primary) + var(--secondary) * var(--color-secondary) +
    //       var(--danger) * var(--color-danger)
    //   ),
     // color: 'hsl(var(--theme-hue), var(--theme-saturation), var(--theme-lightness))',
  )
);

// -----------------------------------------------------------------------------

// 1 - Spacing

/* 
  * TODO: V2?
  *  https://utopia.fyi/space/calculator?c=320,18,1.2,1240,20,1.25,5,2,&s=0.75|0.5,1.5|2|3|4|6,s-l&g=s,l,xl,12 
  * "Using the same base values from the fluid type calculator, this tool helps you to create a related fluid space system."
  */

/* Spacing | Global */
// :root {
//   --space-unit: clamp(1em, 1.5vw, 2em);
//   --space-unit: 1em;
//   --space-xxs: calc(0.25 * var(--space-unit));
//   --space-xs: calc(0.5 * var(--space-unit));
//   --space-sm: calc(0.75 * var(--space-unit));
//   --space-md: calc(1.25 * var(--space-unit)); // 20px
//   --space-lg: calc(2 * var(--space-unit)); // 32px
//   --space-xl: calc(3.25 * var(--space-unit)); // 52px
//   --space-xxl: calc(5.25 * var(--space-unit));
// }

@include utils.cssvars(
  'space',
  (
    unit: 1rem,
    xxs: calc(0.25 * var(--space-unit)),
    xs: calc(0.5 * var(--space-unit)),
    sm: calc(0.75 * var(--space-unit)),
    md: calc(1.25 * var(--space-unit)),
    lg: calc(2 * var(--space-unit)),
    xl: calc(3.25 * var(--space-unit)),
    xxl: calc(5.25 * var(--space-unit)),
  )
);

/* responsive rule affecting all spacing variables */
@media (width >= 64rem) {
  :root {
    --space-unit: 1.25em; /* ðŸ‘‡ this responsive decision affects all margins and paddings */
  }
}

// -----------------------------------------------------------------------------

// 2 - Typography

/**
 * Basic typography style for copy text
 */
// body {
//   color: $text-color;
//   font: normal 125% / 1.4 $text-font-stack;
// }

// :root {
//   /* Step -2: 10.24px â†’ 7.1111px */
//   --text-xs: clamp(0.4444rem, 0.6881rem + -0.2407vw, 0.64rem);
//   /* Step -1: 12.8px â†’ 10.6667px */
//   --text-sm: clamp(0.6667rem, 0.8328rem + -0.1641vw, 0.8rem);
//   /* Step 0: 16px â†’ 16px */
//   --text-md: clamp(1rem, 1rem + 0vw, 1rem);
//   /* Step 1: 20px â†’ 24px */
//   --text-lg: clamp(1.25rem, 1.1885rem + 0.3077vw, 1.5rem);
//   /* Step 2: 25px â†’ 36px */
//   --text-xl: clamp(1.5625rem, 1.3933rem + 0.8462vw, 2.25rem);
//   /* Step 3: 31.25px â†’ 54px */
//   --text-xxl: clamp(1.9531rem, 1.6031rem + 1.75vw, 3.375rem);
//   /* Step 4: 39.0625px â†’ 81px */
//   --h1: clamp(2.4414rem, 1.7962rem + 3.226vi, 5.0625rem);
//   /* Step 5: 48.8281px â†’ 121.5px */
//   // --h1: clamp(3.0518rem, 1.9337rem + 5.5901vw, 7.5938rem);

//   /* Step 5: 67.34px â†’ 199.60px */
//   --h1-highlight: clamp(4.2088rem, 2.174rem + 10.1738vw, 12.475rem);
//   /* --h1: clamp(1.3688rem, 2.174rem + 10.1738vw, 12.475rem); */
// }

/* https://utopia.fyi/type/calculator/?c=320,16,1.25,1620,16,1.5,5,5,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */
@include utils.cssvars(
  'text',
  (
    xs: clamp(0.4444rem, 0.6881rem + -0.2407vw, 0.64rem),
    sm: clamp(0.6667rem, 0.8328rem + -0.1641vw, 0.8rem),
    md: clamp(1rem, 1rem + 0vw, 1rem),
    lg: clamp(1.25rem, 1.1885rem + 0.3077vw, 1.5rem),
    xl: clamp(1.5625rem, 1.3933rem + 0.8462vw, 2.25rem),
    xxl: clamp(1.9531rem, 1.6031rem + 1.75vw, 3.375rem),
    h1: clamp(2.4414rem, 1.7962rem + 3.226vi, 5.0625rem),
  )
);

// -----------------------------------------------------------------------------

// 3 - Colors

// @property --component-bg {
//   syntax: "<color>";
//   inherits: true;
//   initial-value: hsla(from utils.color(primary) h s l / utils.theme(bg-opacity));
// }

@include utils.cssvars(
  'color',
  (
    // primary: #fbe134,
    // primary: var(--color-primary),
    // danger: var(--color-danger),
    // main-dark: #0b0c0c,
    main-dark: var(--color-main-dark),
    dark-50: color-mix(in srgb, utils.color(main-dark) 70%, white),
    bg: var(--color-bg),
    bg-50: color-mix(in srgb, utils.color(bg) 50%, white),
    primary-80: color-mix(in srgb, utils.color(primary) 80%, white),
    primary-60: color-mix(in srgb, utils.color(primary) 60%, white),
    primary-40: color-mix(in srgb, utils.color(primary) 40%, white),
    primary-20: color-mix(in srgb, utils.color(primary) 20%, white),
    primary-10: color-mix(in srgb, utils.color(primary) 10%, white),
    color-white: #fff,
    theme-color: utils.color(primary),
    initial-light: #f5f5f5
  ),
  (
    root: true,
  )
);

// :root {
//   --color-primary: #fbe134;
//   --primary: hsl(from var(--color-primary) h s l / 100%);
//   --color-main-dark: #0b0c0c;
//   --main-dark: hsl(from var(--color-main-dark) h s l / 100%);
//   --color-bg: #0b0c0c;

//   /*
//    * TODO: search if we keep color-mix
//    * sources:
//    * https://una.im/color-mix-opacity/
//    * https://developer.chrome.com/docs/css-ui/css-color-mix
//    */
//   --primary-80: color-mix(in srgb, utils.color(primary) 80%, transparent);
//   --primary-60: color-mix(in srgb, utils.color(primary) 60%, transparent);
//   --primary-40: color-mix(in srgb, utils.color(primary) 40%, transparent);
//   --primary-20: color-mix(in srgb, utils.color(primary) 20%, transparent);
//   --primary-10: color-mix(in srgb, utils.color(primary) 10%, transparent);
//   --color-white: #fff;
//   --text-color: ;
//   --theme-color: var(--color-primary);
//   --initial-light: #f5f5f5;

//   --color-dark: #0b0c0c;

//   /* TODO: Dark Mode? */
//   /* Or apply it via media query */
//   @media (prefers-color-scheme: dark) {
//     // --color-primary: var(--main-dark);
//   }
// }

// -----------------------------------------------------------------------------

// 4 - Components

@include utils.cssvars(
  'component',
  (
    height: 2.625rem,
    // box-shadow-x: utils.theme(base-unit-calc),
    // box-shadow-y: utils.theme(base-unit-calc),
    // bg-opacity: 1,
    transform: translate(0, 0),
    transform-value: calc(utils.theme(base-unit-calc) / 2 * var(--active)),
    // box-shadow-color: utils.theme(current-color),
    // box-shadow-base: utils.component(box-shadow-x) utils.component(box-shadow-y) 0 0 black,
    // box-shadow-hover: utils.component(box-shadow-x) utils.component(box-shadow-y) 0 0
    //   utils.component(box-shadow-color),
    // box-shadow-focus: utils.component(box-shadow-x) utils.component(box-shadow-y) 0 0
    //   utils.component(box-shadow-color),
    // box-shadow-active: calc(utils.component(box-shadow-x) - 50% * var(--theme-base-unit-calc))
    //   calc(utils.component(box-shadow-y) - 50% * utils.theme(base-unit-calc)) 0 0
    //   utils.component(box-shadow-color),
    transform-hover: utils.component(transform),
    transform-focus: translate(0, 0),
    transform-focus-visible: translate(0, 0),
    transform-active: translate(3px, 3px),
    transform-disabled: none,
    // box-shadow-disabled: calc(utils.component(box-shadow-x) - 50% * utils.theme(base-unit-calc))
    //   calc(utils.component(box-shadow-y) - 50% * utils.theme(base-unit-calc)) 0 0
    //   utils.component(box-shadow-color),
    // bg-color: calc(
    //     var(--color-primary) * var(--theme-primary, 1) + var(--color-secondary) *
    //       var(--theme-secondary, 0) + var(--color-danger) * var(--theme-danger, 0)
    //   ),
    color: initial,
    // box-shadow: utils.component(box-shadow-base),
    padding-x: utils.space(unit),
    padding-y: utils.space(xxs),
    margin-bottom: utils.space(unit),
    border-width: 0,
    border-style: solid,
    border-color: utils.color(main-dark),
    font-size: 1rem,
    // border-color: utils.color(main-dark),
    // border: utils.component(border-width) solid utils.component(border-color),
    // Design Tokens
    // primary: utils.theme(primary),
    // state: utils.theme(state),
    // variant: utils.theme(variant),
    not-contained: calc(1 - var(--contained, 1)),
    transition: all 0.1s linear,

    // bg-hue: var(--component-bg-hue),
    // bg-saturation: var(--component-bg-saturation),
    // bg-lightness: var(--component-bg-lightness),
    // bg-opacity: var(--component-bg-opacity),
    // border-hue: var(--component-border-hue),
    // border-saturation: var(--component-border-saturation),
    // border-lightness: var(--component-border-lightness),
    // border-opacity: var(--component-border-opacity),
    // text-hue: var(--component-text-hue),
    // text-saturation: var(--component-text-saturation),
    // text-lightness: var(--component-text-lightness),
    // text-opacity: var(--component-text-opacity),
    // color-bg: hsl(var(--component-bg-hue), var(--component-bg-saturation), var(--component-bg-lightness), var(--component-bg-opacity)),
    // color-border: hsl(var(--component-border-hue), var(--component-border-saturation), var(--component-border-lightness), var(--component-border-opacity)),
     // color-text: hsl(var(--component-text-hue), var(--component-text-saturation), var(--component-text-lightness), var(--component-text-opacity)),
  )
);

$colors: ('primary', 'secondary', 'danger');
$states: ('base', 'hover', 'active', 'focus', 'disabled');
$variants: ('contained', 'outlined', 'text');

@mixin apply-state($stateVar) {
  &:#{$stateVar},
  &.#{$stateVar} {
    @include utils.component(box-shadow, utils.component(box-shadow-#{$stateVar}));
    @include utils.component(transform, utils.component(transform-#{$stateVar}));
  }
}

@mixin theme-component {
  // --theme-current-color: calc(
  //   var(--primary) * var(--color-primary) + var(--secondary) * var(--color-secondary) +
  //     var(--danger) * var(--color-danger)
  // );
  // --theme-current-color: color-mix(
  //   in srgb,
  //   var(--color-primary) calc(var(--primary) * 100%),
  //   color-mix(
  //     in srgb,
  //     var(--color-secondary) calc(var(--secondary) * 100%),
  //     var(--color-danger) calc(var(--danger) * 100%)
  //   )
  // );
  background-color: utils.component(bg-color);
  border-color: utils.component(border-color);
  // color: var(--component-color-text);
  // @include utils.component(primary, 1);
  padding: utils.component(padding-y) utils.component(padding-x);
  // border-radius: utils.theme(borderradius);
  box-shadow: utils.component(box-shadow);
  outline: none;
  transform: utils.component(transform);
  transition: utils.component(transition);

  &.small {
    // @include utils.component(padding-y, space(xs));
    @include utils.component(padding-x, utils.space(xs));
    @include utils.component(height, 2rem); // 32px
  }

  &.large {
    // @include utils.component(padding-y, space(md));
    @include utils.component(padding-x, utils.space(md));
    @include utils.component(height, 3rem); // 48px
  }

  // &.outlined {
  //   background-color: transparent;
  //   color: utils.color(primary);
  // }

  @include apply-state('hover');

  &.raw {
    @include raw-component;
  }

  // &.interactive {

  height: utils.component(height);
  font-weight: bold;
  margin-bottom: utils.component(margin-bottom);
  border-width: utils.component(border-width);
  border-style: utils.component(border-style);
  border: utils.component(border-width) utils.component(border-style) utils.component(border-color);
  font-size: 1rem;
  // @include utils.component(
  //   bg-color,
  //   hsl(
  //     var(--component-bg-hue) var(--component-bg-saturation)
  //       calc(var(--component-bg-lightness) * 1%) / var(--component-bg-opacity)
  //   )
  // );
  // @include utils.component(
  //   text-color,
  //   hsl(
  //     var(--component-text-hue) var(--component-text-saturation)
  //       calc(var(--component-text-lightness) * 1%) / var(--component-text-opacity)
  //   )
  // );
  // @include utils.component(
  //   color-border,
  //   hsl(
  //     var(--component-border-hue) var(--component-border-saturation)
  //       calc(var(--component-border-lightness) * 1%) / var(--component-border-opacity)
  //   )
  // );

  @include theme.primary;
  @include theme.secondary;
  @include theme.danger;

  @include theme.base;
  @include theme.hover;

  @include theme.disabled;

  &.disabled {
    @include utils.component(bg-color, utils.color(bg-primary-disabled));
    @include utils.component(border-color, utils.color(border-primary-disabled));
  }

  // &.contained {
  @include theme.contained;
  // }

  // &.outlined {
  @include theme.outlined;
  // }

  // &.text {
  @include theme.text;
  // }

  // --danger-else-0: var(--color);
  // --danger: var(--danger-else-0);

  // --primary-else-0: var(--color);
  // --primary: var(--primary-else-0);

  // --secondary-else-0: var(--color);
  // --secondary: var(--secondary-else-0);

  --component-bg-hue: calc(var(--color-bg-hue));
  --component-bg-saturation: calc(
    var(--color-bg-saturation) + var(--variant-bg-saturation) + var(--state-bg-saturation)
  );
  // --component-bg-lightness: calc(var(--color-bg-lightness) + var(--variant-bg-lightness) + var(--state-bg-lightness));
  --component-bg-lightness: calc(var(--variant-bg-lightness) + var(--state-bg-lightness));
  --component-bg-opacity: calc(
    var(--color-bg-opacity) * var(--variant-bg-opacity) * var(--state-bg-opacity)
  );
  --component-border-hue: calc(var(--color-border-hue));
  --component-border-saturation: calc(
    var(--color-border-saturation) + var(--variant-border-saturation) +
      var(--state-border-saturation)
  );
  --component-border-lightness: calc(
    var(--color-border-lightness) + var(--variant-border-lightness) + var(--state-border-lightness)
  );
  --component-border-opacity: calc(
    var(--color-border-opacity) * var(--variant-border-opacity) * var(--state-border-opacity)
  );
  --component-text-hue: calc(var(--color-text-hue));
  --component-text-saturation: calc(
    var(--color-text-saturation) + var(--variant-text-saturation) + var(--state-text-saturation)
  );
  --component-text-lightness: calc((var(--color-text-lightness) - var(--threshold) * 1%) * -100%);
  --component-text-opacity: var(--state-text-opacity);
  --component-opacity-bg: var(--component-bg-opacity);
  --component-opacity-border: var(--component-border-opacity);
  --component-opacity-text: var(--component-text-opacity);

  --component-color-bg: hsl(
    var(--component-bg-hue),
    var(--component-bg-saturation),
    var(--component-bg-lightness),
    var(--component-bg-opacity)
  );
  --component-color-border: hsl(
    var(--component-border-hue),
    var(--component-border-saturation),
    var(--component-border-lightness),
    var(--component-border-opacity)
  );
  --component-color-text: hsl(
    var(--component-text-hue),
    var(--component-text-saturation),
    var(--component-text-lightness),
    var(--component-text-opacity)
  );

  background-color: var(--component-color-bg);
  border-color: var(--component-color-border);
  color: var(--component-color-text);

  // }
}

@mixin interactive-component {
  @include theme.focus;
  @include apply-state('focus');
  @include apply-state('focus-visible');
  @include apply-state('disabled');
  @include apply-state('active');
  // &:hover {
  //   box-shadow: none;
  // }

  @include theme.active;
}

@mixin raw-component {
  // --raw: var(--true);
  box-shadow: none;

  &:hover {
    // transform: none;
    box-shadow: none;
    @include utils.component(bg-color, utils.color(primary-60));
  }

  &:active,
  &:focus-visible {
    // transform: none;
    box-shadow: none;
  }
}

h1,
.text-h1 {
  font-size: utils.text(h1);
}

h2,
.text-xxl {
  font-size: utils.text(xxl);
}

h3,
.text-xl {
  font-size: utils.text(xl);
}

h4,
.text-lg {
  font-size: utils.text(lg);
}

p {
  font-size: utils.text(md);
  margin: utils.space(xs) 0;
}

.text-sm {
  font-size: utils.text(sm);
}

.text-xs {
  font-size: utils.text(xs);
}

// -----------------------------------------------------------------------------
// 5 - Theme / component props

@mixin resolve-hsl-value($prop, $prop-value) {
  --#{$prop}-bg-hue: var(--#{$prop}-#{$prop-value}-bg-hue);
  --#{$prop}-bg-saturation: var(--#{$prop}-#{$prop-value}-bg-saturation);
  --#{$prop}-bg-lightness: var(--#{$prop}-#{$prop-value}-bg-lightness);
  --#{$prop}-bg-opacity: var(--#{$prop}-#{$prop-value}-bg-opacity);

  --#{$prop}-border-hue: var(--#{$prop}-#{$prop-value}-border-hue);
  --#{$prop}-border-saturation: var(--#{$prop}-#{$prop-value}-border-saturation);
  --#{$prop}-border-lightness: var(--#{$prop}-#{$prop-value}-border-lightness);
  --#{$prop}-border-opacity: var(--#{$prop}-#{$prop-value}-border-opacity);

  --#{$prop}-text-hue: var(--#{$prop}-#{$prop-value}-text-hue);
  --#{$prop}-text-saturation: var(--#{$prop}-#{$prop-value}-text-saturation);
  --#{$prop}-text-lightness: var(--#{$prop}-#{$prop-value}-text-lightness);
  --#{$prop}-text-opacity: var(--#{$prop}-#{$prop-value}-text-opacity);

  --#{$prop}: #{$prop-value};
}

// Colors

@mixin base {
  &.base:not([disabled]) {
    @include resolve-hsl-value('state', base);

    @content;
  }
}

// -----------------------------------------------------------------------------

// 6 - Breakpoints

$breakpoint-mobile: 640px;
$breakpoint-tablet: 768px;
$breakpoint-desktop: 1024px;
$breakpoint-desktop-xl: 1280px;
$breakpoint-desktop-xxl: 1820px;
$breakpoints: (
  'mobile': $breakpoint-mobile,
  'tablet': $breakpoint-tablet,
  'desktop': $breakpoint-desktop,
  'desktop-xl': $breakpoint-desktop-xl,
  'desktop-xxl': $breakpoint-desktop-xxl,
);

// Breakpoints
@mixin desktop {
  @media screen and (min-width: #{$breakpoint-desktop}px) {
    @content;
  }
}

@mixin media($size) {
  $query: map.get($breakpoints, $size);

  @media only screen and (min-width: $query) {
    @content;
  }
}

// -----------------------------------------------------------------------------

// 7 - Sizes
// Used for Modals, Dialogs, Cards, etc.

@include utils.cssvars(
  'size',
  (
    small: 320px,
    medium: 640px,
    large: 960px,
  )
);

.size-small {
  width: utils.size(small);
}

.size-medium {
  width: utils.size(medium);
}

.size-large {
  width: utils.size(large);
}

// -----------------------------------------------------------------------------

// 7 - Layout
// Used for Layout components (Grid, Flexbox, etc.)

@include utils.cssvars(
  'layout',
  (
    gap: utils.space(sm),
  )
);

// -----------------------------------------------------------------------------

// 8 - Components
// Used for specific Components (Buttons, Inputs, etc.)

@include utils.cssvars(
  'y-btn',
  (
    height: 45px,
    // 42px
  )
);
